📦 Voting App - Microservices Deployment with Docker Swarm
📜 Project Overview
This project demonstrates the deployment of a multi-microservice voting application using Docker Swarm for orchestration and Docker Visualizer for real-time service monitoring.

The application includes:

A frontend to vote ("Cats" or "Dogs")

A worker service that processes votes

A database to store results

A results frontend to display voting outcomes

A visualizer to monitor container distribution across nodes

🎯 Objective
✅ Deploy a scalable, fault-tolerant, and observable microservice-based application.
✅ Implement efficient container orchestration using Docker Swarm.
✅ Visualize service distribution using Docker Visualizer.

🏗 Project Architecture
plaintext
Copy
Edit
Client --> [Vote Frontend] --> [Redis Queue] --> [Worker Service] --> [Postgres DB] --> [Result Frontend]
                                                      |
                                                  [Docker Visualizer]
Services Involved:

vote: Web frontend for casting votes (Flask app)

result: Web frontend for viewing vote results (Flask app)

redis: Message broker for votes

worker: Backend processor transferring votes from Redis to Postgres

db: Postgres database storing votes

visualizer: Real-time Docker Swarm service monitor

🛠 Tech Stack

Technology	Purpose
Docker	Containerization
Docker Compose	Defining multi-container applications
Docker Swarm	Orchestration of services across cluster nodes
Redis	Message queue for fast vote submission
PostgreSQL	Relational database to store votes
Flask	Lightweight Python web framework
Docker Visualizer	Visualization tool for Swarm cluster
📁 Project Structure
plaintext
Copy
Edit
voting-app/
├── vote/
│   ├── app.py
│   ├── requirements.txt
│   └── Dockerfile
├── result/
│   ├── app.py
│   ├── requirements.txt
│   └── Dockerfile
├── worker/
│   ├── worker.py
│   ├── requirements.txt
│   └── Dockerfile
├── docker-compose.yml
├── README.md
├── .gitignore
🚀 Deployment Guide
1. Set Up the Environment
Install Docker on all nodes (Manager and Workers).

Ensure nodes can communicate over the network (TCP port 2377 for cluster management).

2. Initialize Docker Swarm
On the Manager Node:

bash
Copy
Edit
docker swarm init
Copy the docker swarm join command and run it on Worker Nodes.

Example:

bash
Copy
Edit
docker swarm join --token <token> <manager-ip>:2377
3. Clone the Repository
bash
Copy
Edit
git clone https://github.com/your-username/voting-app.git
cd voting-app
4. Deploy the Stack
bash
Copy
Edit
docker stack deploy -c docker-compose.yml voting
Note: voting is the stack name.

5. Verify the Services
bash
Copy
Edit
docker service ls
You should see all services (vote, result, worker, redis, db, visualizer) running.

6. Access the Application

Service	URL
Vote Frontend	http://<manager-ip>:5000
Result Frontend	http://<manager-ip>:5001
Docker Visualizer	http://<manager-ip>:8080
🔄 Scaling Services
You can scale any service easily.
Example: Scale vote service to 5 replicas:

bash
Copy
Edit
docker service scale voting_vote=5
To scale down:

bash
Copy
Edit
docker service scale voting_vote=2
🔎 Monitoring and Logs
View cluster visualization on Docker Visualizer (port 8080).

Check service logs:

bash
Copy
Edit
docker service logs voting_worker
View container distribution:

bash
Copy
Edit
docker node ls
docker service ps voting_vote
📚 Useful Docker Commands

Command	Purpose
docker service ls	List all services
docker stack ps voting	List all tasks in the voting stack
docker stack rm voting	Remove the voting stack
docker node ls	List all swarm nodes
docker service update --replicas	Scale services
🧹 Cleanup
To remove the voting stack:

bash
Copy
Edit
docker stack rm voting
To leave the swarm (on a worker node):

bash
Copy
Edit
docker swarm leave
On the manager node:

bash
Copy
Edit
docker swarm leave --force
📌 Best Practices Followed
Microservices loosely coupled via Docker networks.

Data persistence using Docker volumes (Postgres).

Fault tolerance using multiple replicas and Swarm self-healing.

Real-time observability with Docker Visualizer.

🤝 Contributing
Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.

